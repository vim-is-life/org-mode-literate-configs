#+TITLE: QTile Config
#+OPTIONS: author:nil toc:nil num:nil
#+STARTUP: fold
#+PROPERTY: header-args :exports none :tangle ~/.config/qtile/config.py :results neither

* Contents :TOC:
- [[#license][License]]
- [[#resources][Resources]]
- [[#imports][Imports]]
- [[#setting-keys][Setting Keys]]
  - [[#keys-to-switch-between-windows][Keys to switch between windows.]]
  - [[#keys-to-change-window-layout][Keys to change window layout.]]
  - [[#keys-to-grow-windows][Keys to grow windows.]]
  - [[#keys-to-change-tiling-layout][Keys to change tiling layout.]]
  - [[#keys-to-launch-frequently-used-programs][Keys to launch frequently used programs.]]
  - [[#keys-to-do-with-qtile][Keys to do with Qtile.]]
- [[#workspacegroup-settings][Workspace/Group Settings]]
- [[#layouts][Layouts]]
- [[#bar-settings][Bar Settings]]
- [[#floating-layout-settings][Floating Layout Settings]]
- [[#fullscreen-and-focus-settings][Fullscreen and Focus Settings]]
- [[#get-colorscheme-from-pywal][Get colorscheme from pywal]]

* License
#+begin_example
Copyright (c) 2010 Aldo Cortesi
Copyright (c) 2010, 2014 dequis
Copyright (c) 2012 Randall Ma
Copyright (c) 2012-2014 Tycho Andersen
Copyright (c) 2012 Craig Barnes
Copyright (c) 2013 horsik
Copyright (c) 2013 Tao Sauvage

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
#+end_example
* Resources
Qtile has great documentation, see it [[https://docs.qtile.org/en/latest][here]].
* Imports
#+begin_src python
### FILE AUTOMATICALLY TANGLED FROM ~/.config/org-mode-literate-configs/qtile.org ###
from typing import List  # noqa: F401

from libqtile import bar, layout, widget
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.extension import DmenuRun
#+end_src
* Setting Keys
I set the mod key to be "mod4" here, which is the Super or "Windows" key.
# I also set my terminal to be ~st~ (see [[https://st.suckless.org/]]).
#+begin_src python
mod = "mod4"
terminal = "urxvt"
#+end_src

Here, I set keybindings. See [[https://docs.qtile.org/en/latest/manual/config/lazy.html][this link]] for a list of commands that can be bound
to keys.

** Keys to switch between windows.
| Keybinging | Action                    |
|------------+---------------------------|
| ~Mod h~      | Focus window to left      |
| ~Mod l~      | Focus window to the right |
| ~Mod j~      | Focus window down         |
| ~Mod k~      | Focus window up           |
| ~Mod SPC~    | Focus previous window     |
| ~Mod q~      | Kill focused window       |
#+begin_src python
keys = [
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(),
        desc="Move window focus to other window"),
    Key([mod], "q", lazy.window.kill(), desc="Kill focused window"),
#+end_src
** Keys to change window layout.
The bindings here are using capital letters, so the shift key must be held down
as well. Move windows between left/right columns or up/down in current stack.
Moving out of range in Columns layout will create a new column.
| Keybinging    | Action               |
|---------------+----------------------|
| ~Mod H~ | Move window to left  |
| ~Mod L~ | Move window to right |
| ~Mod J~ | Move window down  |
| ~Mod K~ | Move window up    |
#+begin_src python
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(),
        desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(),
        desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(),
        desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
#+end_src

** Keys to grow windows.
If current window is on the edge of screen and direction will be to screen
edge - window would shrink.
| Keybinging | Action               |
|------------+----------------------|
| ~Mod n~    | Reset window sizes   |
| ~Mod C-h~  | Grow window to left  |
| ~Mod C-l~  | Grow window to right |
| ~Mod C-j~  | Grow window to down  |
| ~Mod C-k~  | Grow window to up    |
#+begin_src python
    Key([mod, "control"], "h", lazy.layout.grow_left(),
        desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(),
        desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(),
        desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
#+end_src

** Keys to change tiling layout.
Split side of the stack is with all windows displayed, and unsplit is one window
displayed, but with multiple stack panes.
| Keybinging    | Action                                          |
|---------------+-------------------------------------------------|
| ~Mod Shift RET~ | Toggle between split and unsplit sides of stack |
| ~Mod TAB~       | Toggle between layouts                          |
#+begin_src python
    Key([mod, "shift"], "Return", lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack"),
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
#+end_src

** Keys to launch frequently used programs.
| Keybinging | Action                       |
|------------+------------------------------|
| ~Mod RET~    | Launch terminal              |
| ~Mod d~      | Spawn a command using dmenu. |
# | ~Mod o~      | Spawn emacsclient.           |
#+begin_src python
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
    Key([mod], "d", lazy.run_extension(DmenuRun(
        demnu_prompt=">",
        )),
        desc="Spawn a command using dmenu."),
    # Key([mod], "o", lazy.spawn("emacsclient -n -c", desc="Open emacsclient frame.")),
#+end_src

** Keys to do with Qtile.
| Keybinging | Action                                 |
|------------+----------------------------------------|
| ~Mod C-r~    | Reload config                          |
| ~Mod C-q~    | Shutdown Qtile                         |
#+begin_src python
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
]
#+end_src
* Workspace/Group Settings
#+begin_src python
groups = [Group(i) for i in "123456789"]

for i in groups:
    keys.extend([
        # mod1 + letter of group = switch to group
        Key([mod], i.name, lazy.group[i.name].toscreen(),
            desc="Switch to group {}".format(i.name)),

        # mod1 + shift + letter of group = switch to & move focused window to group
        Key([mod, "shift"], i.name, lazy.window.togroup(i.name, switch_group=True),
            desc="Switch to & move focused window to group {}".format(i.name)),
        # Or, use below if you prefer not to switch to that group.
        # # mod1 + shift + letter of group = move focused window to group
        # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
        #     desc="move focused window to group {}".format(i.name)),
    ])
#+end_src
* Layouts
These are the available layouts by default.
#+begin_src python
layouts = [
    layout.Bsp(
        border_focus_stack=['#d75f5f', '#8f3d3d'],
        border_width=5,
        margin=5
    ),
    layout.Columns(
        border_focus_stack=['#d75f5f', '#8f3d3d'],
        border_width=5,
        margin=5
    ),
    layout.Max(),
    # Try more layouts by unleashing below layouts.
    # layout.Stack(num_stacks=2),
    layout.Matrix(),
    layout.MonadTall(
        border_focus_stack=['#d75f5f', '#8f3d3d'],
        border_width=5,
        margin=5
    ),
    layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]
#+end_src
* Bar Settings
#+begin_src python
screens = [
    Screen(
        top=bar.Bar(
            [
                widget.CurrentLayout(),
                widget.GroupBox(),
                widget.Prompt(),
                widget.WindowName(),
                widget.Systray(),
                widget.BatteryIcon(),
                widget.Clipboard(),
                widget.QuickExit(),
                widget.Clock(format='%Y-%m-%d %a %I:%M %p'),
            ],
            24,
            border_width=[2, 0, 2, 0],  # Draw top and bottom borders
            border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
        ),
    ),
]

widget_defaults = dict(
    font='sans',
    fontsize=13,
    padding=3,
)
extension_defaults = widget_defaults.copy()
#+end_src
* Floating Layout Settings
#+begin_src python
# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: List
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(float_rules=[
    # Run the utility of `xprop` to see the wm class and name of an X client.
    *layout.Floating.default_float_rules,
    Match(wm_class='confirmreset'),  # gitk
    Match(wm_class='makebranch'),  # gitk
    Match(wm_class='maketag'),  # gitk
    Match(wm_class='ssh-askpass'),  # ssh-askpass
    Match(title='branchdialog'),  # gitk
    Match(title='pinentry'),  # GPG key password entry
])
#+end_src
* Fullscreen and Focus Settings
#+begin_src python
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
#+end_src
* Get colorscheme from pywal
I have to do this according to [[https://github.com/dylanaraps/pywal/wiki/Customization#qtile][the wiki]].
#+begin_src python
colors = []
cache='/home/shark/.cache/wal/colors'
def load_colors(cache):
    with open(cache, 'r') as file:
        for i in range(8):
            colors.append(file.readline().strip())
    colors.append('#ffffff')
    lazy.reload()
load_colors(cache)
#+end_src
